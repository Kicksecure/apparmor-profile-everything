#!/usr/bin/env -S -i /bin/bash

## Copyright (C) 2019 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -e

## Wrapper for apt-get meant to be used with apparmor-profile-everything
## to prevent an attacker abusing apt's command line arguments and the
## extra permissions granted in its AppArmor profile.
##
## For example this command can replace the kernel images:
## apt-get update -o APT::Update::Pre-Invoke::=/bin/mv /malicious_kernel /boot/vmlinuz
##
## /boot access is not allowed in the main profile but is allowed in the
## apt-get profile for kernel upgrades.

arch="$(dpkg --print-architecture)"
kernel_package="linux-image-${arch}"
header_package="linux-headers-${arch}"

## TODO
packages_refuse_removal="apparmor $kernel_package $header_package"

## https://forums.whonix.org/t/disable-grub-output-verbose-by-default/8656
packages_refuse_install="grub-output-verbose"

## proper whitespace handling
## https://www.whonix.org/wiki/Dev/bash
unset command
declare -a command

while :
do
      case $1 in
      update)
         command+=("$1")
         shift
         continue
         ;;
      upgrade)
         command+=("$1")
         shift
         continue
         ;;
      install)
         command+=("$1")
         shift
         continue
         ;;
      reinstall)
         command+=("$1")
         shift
         continue
         ;;
      remove)
         command+=("$1")
         shift
         continue
         ;;
      purge)
         command+=("$1")
         shift
         continue
         ;;
      autoremove)
         command+=("$1")
         shift
         continue
         ;;
      dist-upgrade)
         command+=("$1")
         shift
         continue
         ;;
      clean)
         command+=("$1")
         shift
         continue
         ;;
      autoclean)
         command+=("$1")
         shift
         continue
         ;;
      check)
         command+=("$1")
         shift
         continue
         ;;
      source)
         command+=("$1")
         shift
         continue
         ;;
      download)
         command+=("$1")
         shift
         continue
         ;;
      changelog)
         command+=("$1")
         shift
         continue
         ;;
      --fix-missing)
         command+=("$1")
         shift
         continue
         ;;
      --fix-broken)
         command+=("$1")
         shift
         continue
         ;;
      --no-install-recommends)
         command+=("$1")
         shift
         continue
         ;;
      --simulate)
         command+=("$1")
         shift
         continue
         ;;
      --quiet=1)
         command+=("$1")
         shift
         continue
         ;;
      --quiet=2)
         command+=("$1")
         shift
         continue
         ;;
      --*)
         ## TODO:
         echo "ERROR: invalid --"
         exit 1
         shift
         continue
         ;;
      -*)
         ## TODO:
         echo "ERROR: invalid -"
         exit 1
         shift
         continue
         ;;
       *)
         ## TODO: currently not possible to add parameters at the end.
         ## rapt install hello --simulate
         ## For now, package name(s) need to be at the end.
         break
         ;;
      esac
done

## If there are input files (for example) that follow the options, they
## will remain in the "$@" positional parameters.

## Package checking can be done outside of the loop by iterating through "$@".

packages_list_installed="$(dpkg-query -Wf '${Package}\n')"
packages_list_repository="$(apt-cache pkgnames)"

packages_list_merged="$packages_list_installed
$packages_list_repository"

packages_list_merged="$(echo "$packages_list_merged" | sort --unique --version-sort)"

true "arg: '$arg'"

unset pkg
declare -A -g pkg

if [[ ! "" = "$@" ]] ; then
   for arg in "$@" ; do
      pkg["$arg"]=notyet

      for package in $packages_list_merged ; do
         if [ "$arg" = "${package}" ]; then
            pkg["$arg"]=ok
            continue
         fi
      done
   done
   unset arg
   unset package

   for arg in "$@" ; do
      if [ "${pkg["${arg}"]}" = "ok" ]; then
         continue
      else
         echo "ERROR: invalid package! arg: '$arg'"
         exit 1
      fi
   done
   unset arg
fi

error_output() {
   if [ ! "$output_stdout" = "" ] ; then
      echo "$output_stdout"
   fi
   if [ ! "$output_stderr" = "" ] ; then
      echo "$output_stderr"
   fi
}

check_for_packages_on_refused_removal_list() {
   ## output of includes (excerpt):
   #sudo apt-get --simulate --quiet=2 purge apparmor
   ##
   ##Purg apparmor-profiles-hardened-debian [3:12.4-1]
   ##Purg apparmor-profile-torbrowser [3:6.5-1]
   ##Purg apparmor-utils [2.13.2-10]

   ## Output of 'sudo apt-get --simulate --quiet=2 purge apparmor' does not
   ## contain 'apparmor'. Therefore we have to iterate through the list of args.

   for arg in "$@" ; do
      for package in $packages_refuse_install ; do
         if [ "$arg" = "$package" ]; then
            error_output
            echo "ERROR: forbidden to install package! package: '$package'"
            exit 1
         fi
      done
   done

   for arg in "$@" ; do
      for package in $packages_refuse_removal ; do
         if [ "$arg" = "$package" ]; then
            error_output
            echo "ERROR: forbidden to remove package! package: '$package'"
            exit 1
         fi
      done
   done

   while read -r -d $'\n' line ; do
      read -r first second third <<< "$line" || true
      if [ "$first" = "Remv" ]; then
         for package in $packages_refuse_removal ; do
            if [ "$second" = "$package" ]; then
               error_output
               echo "ERROR: forbidden to remove package! package: '$package'"
               exit 1
            fi
         done
      fi
   done <<< "$output_stdout"
}

apt_simulate_exit_code=0
## We don't want to preserve the environment to prevent any LD_PRELOAD tricks.
output_stdout="$(env -i /usr/bin/apt-get --simulate --quiet=2 "${command[@]}" "${@}" 2>/dev/null)" || { apt_simulate_exit_code=$? ; true; }

## How to safely capture stdout and stderr into different variables in a single command?
output_stderr="$(env -i /usr/bin/apt-get --simulate --quiet=2 "${command[@]}" "${@}" 2>&1 1>/dev/null)" || { apt_simulate_exit_code=$? ; true; }

if [ "$apt_simulate_exit_code" = "100" ]; then
   if [ "$output_stderr" = "E: Command line option --simulate is not understood in combination with the other options" ]; then
      ## Could be a simple 'apt-get update'.
      true "apt output_stderr has expected value. Permitting."
   else
      echo "$output_stdout"
      echo "$output_stderr"
      exit "$apt_simulate_exit_code"
   fi
fi

check_for_packages_on_refused_removal_list "$@"
env -i /usr/bin/apt-get "${command[@]}" "${@}"
