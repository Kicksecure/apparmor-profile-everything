#!/usr/bin/env -S -i /bin/bash

set -e

## Wrapper for apt-get meant to be used with apparmor-profile-anondist
## to prevent an attacker abusing apt's command line arguments and the
## extra permissions granted in its AppArmor profile.
##
## For example this command can replace the kernel images:
## apt-get update -o APT::Update::Pre-Invoke::=/bin/mv /malicious_kernel /boot/vmlinuz
##
## /boot access is not allowed in the main profile but is allowed in the
## apt-get profile for kernel upgrades.

arch="$(dpkg --print-architecture)"
kernel_package="linux-image-${arch}"
header_package="linux-headers-${arch}"

## TODO
packages_refuse_removal="apparmor $kernel_package $header_package"

while :
do
      case $1 in
      update)
         ## TODO: this is wrong. Needs to be an array with proper quotes handling.
         command+="$1 "
         shift
         continue
         ;;
      upgrade)
         command+="$1 "
         shift
         continue
         ;;
      install)
         command+="$1 "
         shift
         continue
         ;;
      reinstall)
         command+="$1 "
         shift
         continue
         ;;
      remove)
         command+="$1 "
         shift
         continue
         ;;
      purge)
         command+="$1 "
         shift
         continue
         ;;
      autoremove)
         command+="$1 "
         shift
         continue
         ;;
      dist-upgrade)
         command+="$1 "
         shift
         continue
         ;;
      clean)
         command+="$1 "
         shift
         continue
         ;;
      autoclean)
         command+="$1 "
         shift
         continue
         ;;
      check)
         command+="$1 "
         shift
         continue
         ;;
      source)
         command+="$1 "
         shift
         continue
         ;;
      download)
         command+="$1 "
         shift
         continue
         ;;
      changelog)
         command+="$1 "
         shift
         continue
         ;;
      --fix-missing)
         command+="$1 "
         shift
         continue
         ;;
      --no-install-recommends)
         command+="$1 "
         shift
         continue
         ;;
      --simulate)
         command+="$1 "
         shift
         continue
         ;;
      --quiet=1)
         command+="$1 "
         shift
         continue
         ;;
      --quiet=2)
         command+="$1 "
         shift
         continue
         ;;
      --*)
         ## TODO:
         echo "ERROR: invalid --"
         exit 1
         shift
         continue
         ;;
      -*)
         ## TODO:
         echo "ERROR: invalid -"
         exit 1
         shift
         continue
         ;;
      *)
         break
         ;;
      esac
done

## If there are input files (for example) that follow the options, they
## will remain in the "$@" positional parameters.

## Package checking can be done outside of the loop by iterating through "$@".

packages_list_installed="$(dpkg-query -Wf '${Package}\n')"
packages_list_repository="$(apt-cache pkgnames)"

packages_list_merged="$packages_list_installed
$packages_list_repository"

packages_list_merged="$(echo "$packages_list_merged" | sort --unique --version-sort)"

true "arg: '$arg'"

declare -A -g pkg

if [[ ! "" = "$@" ]] ; then
   for arg in "$@" ; do
      pkg["$arg"]=notyet

      for package in $packages_list_merged ; do
         if [ "$arg" = "${package}" ]; then
            pkg["$arg"]=ok
            continue
         fi
      done
   done
   unset arg
   unset package

   for arg in "$@" ; do
      if [ "${pkg["${arg}"]}" = "ok" ]; then
         continue
      else
         echo "ERROR: invalid package! $arg"
         exit 1
      fi
   done
   unset arg
fi

## We don't want to preserve the environment to prevent any LD_PRELOAD tricks.
output="$(env -i /usr/bin/apt-get --simulate --quiet=2 $command "${@}")"

while read -r -d $'\n' line ; do
   echo "line: $line"
   read -r first second third <<< "$line" || true
   if [ "$first" = "Remv" ]; then
      for package in $packages_refuse_removal ; do
         if [ "$second" = "$package" ]; then
            echo "ERROR: forbidden to remove package! $package"
            echo "output:"
            echo "$output"
            exit 1
         fi
      done
   fi
done <<< "$output"

env -i /usr/bin/apt-get $command "${@}"
